// vite.config.ts
import react from "file:///D:/Projects/DGShahr/ui-kit/node_modules/@vitejs/plugin-react-swc/index.mjs";
import { defineConfig } from "file:///D:/Projects/DGShahr/ui-kit/node_modules/vite/dist/node/index.js";
import dts from "file:///D:/Projects/DGShahr/ui-kit/node_modules/vite-plugin-dts/dist/index.mjs";
import { libInjectCss } from "file:///D:/Projects/DGShahr/ui-kit/node_modules/vite-plugin-lib-inject-css/dist/index.js";
import preserveDirectives from "file:///D:/Projects/DGShahr/ui-kit/node_modules/rollup-preserve-directives/dist/es/index.mjs";
import { readdirSync, existsSync, statSync } from "fs";
import { resolve } from "node:path";

// package.json
var peerDependencies = {
  react: ">=18.2.0",
  "react-dom": ">=18.2.0"
};

// vite.config.ts
var __vite_injected_original_dirname = "D:\\Projects\\DGShahr\\ui-kit";
var componentDir = resolve(__vite_injected_original_dirname, "src/components");
var findEntries = (dir) => {
  const entries2 = {};
  readdirSync(dir).forEach((item) => {
    const itemPath = resolve(dir, item);
    if (statSync(itemPath).isDirectory()) {
      const indexPath = resolve(itemPath, "index.tsx");
      if (existsSync(indexPath)) {
        const componentsName = itemPath.replace(`${componentDir}\\`, "");
        entries2[componentsName] = indexPath;
      }
      Object.assign(entries2, findEntries(itemPath));
    }
  });
  return entries2;
};
var entries = findEntries(componentDir);
var componentsIndexRoute = resolve(componentDir, "index.ts");
if (existsSync(componentsIndexRoute)) {
  entries["index"] = componentsIndexRoute;
}
var vite_config_default = defineConfig({
  plugins: [
    react(),
    libInjectCss(),
    dts({ entryRoot: "src/components", exclude: ["src/icons"] }),
    preserveDirectives()
  ],
  resolve: {
    alias: {
      "@/src": resolve(__vite_injected_original_dirname, "src")
    }
  },
  build: {
    target: "esnext",
    lib: {
      entry: entries,
      name: "@dgshahr/ui-kit",
      fileName: (format, entryName) => {
        const fileExt = format === "es" || format === "esm" || format === "module" ? "js" : format;
        if (entryName === "index") return `index.${fileExt}`;
        return `${entryName}/index.${fileExt}`;
      },
      formats: ["es", "cjs"]
    },
    rollupOptions: {
      external: ["react/jsx-runtime", ...Object.keys(peerDependencies)],
      output: {
        assetFileNames: "assets/[name][extname]"
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
